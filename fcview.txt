import SwiftUI
import ComposableArchitecture

// MARK: - State and Actions

struct AppState: Equatable {
    var currentNumber: Int = 0
}

enum AppAction {
    case numberChanged(Int)
}

let appReducer = Reducer<AppState, AppAction, AppEnvironment> { state, action, _ in
    switch action {
    case let .numberChanged(newNumber):
        state.currentNumber = newNumber
        return .none
    }
}

struct AppEnvironment { }

// MARK: - Views

struct FlipCardView: View {
    let digit: Int
    
    @State private var flipped = false
    
    var body: some View {
        Text(flipped ? String(digit) : "0")
            .font(.largeTitle)
            .foregroundColor(.white)
            .frame(width: 100, height: 100)
            .background(Color.blue)
            .cornerRadius(10)
            .rotation3DEffect(.degrees(flipped ? 180 : 0), axis: (x: 0, y: 1, z: 0))
            .onTapGesture {
                withAnimation {
                    flipped.toggle()
                }
            }
    }
}

struct ContentView: View {
    let store: Store<AppState, AppAction>
    
    var body: some View {
        WithViewStore(store) { viewStore in
            VStack {
                HStack(spacing: 10) {
                    ForEach(String(viewStore.currentNumber), id: \.self) { char in
                        if let digit = Int(String(char)) {
                            FlipCardView(digit: digit)
                        }
                    }
                }
                
                Slider(value: viewStore.binding(
                    get: \.currentNumber,
                    send: AppAction.numberChanged
                ), in: 0...999, step: 1)
                    .padding()
            }
        }
    }
}

@main
struct YourApp: App {
    let store = Store(initialState: AppState(),
                      reducer: appReducer,
                      environment: AppEnvironment())

    var body: some Scene {
        WindowGroup {
            ContentView(store: store)
        }
    }
}